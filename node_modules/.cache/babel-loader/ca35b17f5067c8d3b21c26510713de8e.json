{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prasa\\\\Downloads\\\\E-Commerce\\\\E-Commerce_App-main\\\\src\\\\controllers\\\\Body\\\\component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Card from \"../cards/component\";\nimport { getProducts } from \"../FetchedItems\";\nimport \"./styles.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setProducts } from \"../redux_store/action/productsAction\";\nimport { updateProductWithItsCount } from \"./helperMethods\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Body() {\n  _s();\n\n  let dispatch = useDispatch();\n  let {\n    products,\n    productCart\n  } = useSelector(state => state);\n  useEffect(() => {\n    async function fetchData() {\n      let products = await getProducts();\n      dispatch(setProducts(products.data));\n    }\n\n    fetchData();\n  }, [dispatch]);\n  const updatedProductWithCount = updateProductWithItsCount(products, productCart);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"product__container flex-function\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product__subcontainer flex-function\",\n      children: updatedProductWithCount.map((item, index) => /*#__PURE__*/_jsxDEV(Card, {\n        item: item,\n        id: index + 1\n      }, Math.random() * products.length + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Body, \"dQZkWzz2FoMaet0MH4p91/n3Id4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Body;\n\nvar _c;\n\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"sources":["C:/Users/prasa/Downloads/E-Commerce/E-Commerce_App-main/src/controllers/Body/component.jsx"],"names":["React","useEffect","Card","getProducts","useDispatch","useSelector","setProducts","updateProductWithItsCount","Body","dispatch","products","productCart","state","fetchData","data","updatedProductWithCount","map","item","index","Math","random","length"],"mappings":";;;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAO,cAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,yBAAT,QAA0C,iBAA1C;;AACA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B,MAAIC,QAAQ,GAAGL,WAAW,EAA1B;AACA,MAAI;AAAEM,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BN,WAAW,CAAEO,KAAD,IAAWA,KAAZ,CAA3C;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeY,SAAf,GAA2B;AACzB,UAAIH,QAAQ,GAAG,MAAMP,WAAW,EAAhC;AACAM,MAAAA,QAAQ,CAACH,WAAW,CAACI,QAAQ,CAACI,IAAV,CAAZ,CAAR;AACD;;AACDD,IAAAA,SAAS;AACV,GANQ,EAMN,CAACJ,QAAD,CANM,CAAT;AAOA,QAAMM,uBAAuB,GAAGR,yBAAyB,CACvDG,QADuD,EAEvDC,WAFuD,CAAzD;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,kCAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,qCAAf;AAAA,gBACGI,uBAAuB,CAACC,GAAxB,CAA4B,CAACC,IAAD,EAAOC,KAAP,kBAC3B,QAAC,IAAD;AACE,QAAA,IAAI,EAAED,IADR;AAEE,QAAA,EAAE,EAAEC,KAAK,GAAG;AAFd,SAGOC,IAAI,CAACC,MAAL,KAAgBV,QAAQ,CAACW,MAAzB,GAAkCH,KAHzC;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GA5BuBV,I;UACPJ,W,EACiBC,W;;;KAFVG,I","sourcesContent":["\n\nimport React, { useEffect } from \"react\";\nimport Card from \"../cards/component\";\nimport { getProducts } from \"../FetchedItems\";\nimport \"./styles.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setProducts } from \"../redux_store/action/productsAction\";\nimport { updateProductWithItsCount } from \"./helperMethods\";\nexport default function Body() {\n  let dispatch = useDispatch();\n  let { products, productCart } = useSelector((state) => state);\n\n  useEffect(() => {\n    async function fetchData() {\n      let products = await getProducts();\n      dispatch(setProducts(products.data));\n    }\n    fetchData();\n  }, [dispatch]);\n  const updatedProductWithCount = updateProductWithItsCount(\n    products,\n    productCart\n  );\n  return (\n    <div className=\"product__container flex-function\">\n      <div className=\"product__subcontainer flex-function\">\n        {updatedProductWithCount.map((item, index) => (\n          <Card\n            item={item}\n            id={index + 1}\n            key={Math.random() * products.length + index}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}