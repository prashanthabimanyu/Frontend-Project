{"ast":null,"code":"import { ActionTypes } from \"../constants/actionType\";\nconst initialState = {\n  productCart: JSON.parse(localStorage.getItem(\"productCart\")) || [],\n  products: []\n};\n\nfunction getProductDetail(arr, id) {\n  for (let i = 0; i < arr.length; i++) {\n    let item = arr[i];\n    if (item.id === id) return i;\n  }\n\n  return -1;\n}\n\nfunction updateProduct(requiredProduct, payload) {\n  // const {INCREMENT} = ActionType;\n  if (payload.updateType === \"INCREMENT\") {\n    requiredProduct.count += 1;\n    return requiredProduct;\n  } else {\n    requiredProduct.count = requiredProduct.count > 0 ? requiredProduct.count - 1 : 0;\n    if (requiredProduct.count === 0) return;\n    return requiredProduct;\n  }\n}\n\nfunction addProductInCart(payload) {\n  // console.log(\"This  function is called\", payload);\n  if (payload.updateType === \"INCREMENT\") {\n    return {\n      id: payload.id,\n      count: 1\n    };\n  }\n}\n\nfunction updateproductCounter(state, payload) {\n  let updatedCart = state.productCart;\n  let productIndex = getProductDetail(updatedCart, payload.id);\n\n  if (productIndex !== -1) {\n    let updatedProduct = updateProduct(updatedCart[productIndex], payload);\n    if (updatedProduct) updatedCart[productIndex] = updatedProduct;else updatedCart = updatedCart.filter(item => item.count !== 0);\n  } else {\n    let obj = addProductInCart(payload);\n    if (obj) updatedCart.push(obj);\n  }\n\n  return updatedCart;\n}\n\nfunction counterReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    UPDATE_PRODUCT_COUNTER,\n    SET_PRODUCTS,\n    SET_CHECKOUT\n  } = ActionTypes;\n\n  switch (action.type) {\n    case UPDATE_PRODUCT_COUNTER:\n      let updatedProducts = updateproductCounter(state, action.payload);\n      localStorage.setItem(\"productCart\", JSON.stringify(updatedProducts));\n      return { ...state,\n        productCart: updatedProducts\n      };\n\n    case SET_PRODUCTS:\n      const products = action.payload;\n      return { ...state,\n        products\n      };\n\n    case SET_CHECKOUT:\n      return { ...state,\n        productCart: []\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default counterReducer;","map":{"version":3,"sources":["C:/Users/prasa/Downloads/E-Commerce/E-Commerce_App-main/src/controllers/redux_store/reducer/productReducer.jsx"],"names":["ActionTypes","initialState","productCart","JSON","parse","localStorage","getItem","products","getProductDetail","arr","id","i","length","item","updateProduct","requiredProduct","payload","updateType","count","addProductInCart","updateproductCounter","state","updatedCart","productIndex","updatedProduct","filter","obj","push","counterReducer","action","UPDATE_PRODUCT_COUNTER","SET_PRODUCTS","SET_CHECKOUT","type","updatedProducts","setItem","stringify"],"mappings":"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","sourcesContent":["import { ActionTypes } from \"../constants/actionType\";\nconst initialState = {\n  productCart: JSON.parse(localStorage.getItem(\"productCart\")) || [],\n  products: [],\n};\nfunction getProductDetail(arr, id) {\n  for (let i = 0; i < arr.length; i++) {\n    let item = arr[i];\n    if (item.id === id) return i;\n  }\n  return -1;\n}\n\nfunction updateProduct(requiredProduct, payload) {\n  // const {INCREMENT} = ActionType;\n  if (payload.updateType === \"INCREMENT\") {\n    requiredProduct.count += 1;\n    return requiredProduct;\n  } else {\n    requiredProduct.count =\n      requiredProduct.count > 0 ? requiredProduct.count - 1 : 0;\n    if (requiredProduct.count === 0) return;\n    return requiredProduct;\n  }\n}\nfunction addProductInCart(payload) {\n  // console.log(\"This  function is called\", payload);\n\n  if (payload.updateType === \"INCREMENT\") {\n    return {\n      id: payload.id,\n      count: 1,\n    };\n  }\n}\n\nfunction updateproductCounter(state, payload) {\n  let updatedCart = state.productCart;\n  let productIndex = getProductDetail(updatedCart, payload.id);\n  if (productIndex !== -1) {\n    let updatedProduct = updateProduct(updatedCart[productIndex], payload);\n    if (updatedProduct) updatedCart[productIndex] = updatedProduct;\n    else updatedCart = updatedCart.filter((item) => item.count !== 0);\n  } else {\n    let obj = addProductInCart(payload);\n    if (obj) updatedCart.push(obj);\n  }\n  return updatedCart;\n}\n\nfunction counterReducer(state = initialState, action) {\n  const { UPDATE_PRODUCT_COUNTER, SET_PRODUCTS, SET_CHECKOUT } = ActionTypes;\n  switch (action.type) {\n    case UPDATE_PRODUCT_COUNTER:\n      let updatedProducts = updateproductCounter(state, action.payload);\n      localStorage.setItem(\"productCart\", JSON.stringify(updatedProducts));\n      return { ...state, productCart: updatedProducts };\n    case SET_PRODUCTS:\n      const products = action.payload;\n      return { ...state, products };\n    case SET_CHECKOUT:\n      return { ...state, productCart: [] };\n    default:\n      return state;\n  }\n}\nexport default counterReducer;\n"]},"metadata":{},"sourceType":"module"}